'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _set = require('../../ethereum/set');

var _set2 = _interopRequireDefault(_set);

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/home/tushar/Desktop/fundchain/pages/ads/new.js?entry';


var adNew = function (_Component) {
  (0, _inherits3.default)(adNew, _Component);

  function adNew() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, adNew);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = adNew.__proto__ || (0, _getPrototypeOf2.default)(adNew)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      totalMoney: '',
      minimumContribution: '',
      investor_return: '',
      errorMessage: '',
      loading: false
    }, _this.onSubmit = function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(event) {
        var accounts;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                event.preventDefault();

                _this.setState({ loading: true, errorMessage: '' });

                _context.prev = 2;
                _context.next = 5;
                return _web2.default.eth.getAccounts();

              case 5:
                accounts = _context.sent;
                _context.next = 8;
                return _set2.default.methods.gen_ad(_this.state.minimumContribution, _this.state.totalMoney, _this.state.investor_return).send({
                  from: accounts[0]
                });

              case 8:

                _routes.Router.pushRoute('/');
                _context.next = 14;
                break;

              case 11:
                _context.prev = 11;
                _context.t0 = _context['catch'](2);

                _this.setState({ errorMessage: _context.t0.message });

              case 14:

                _this.setState({ loading: false });

              case 15:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this2, [[2, 11]]);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }(), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(adNew, [{
    key: 'render',
    value: function render() {
      var _this3 = this;

      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 40
        }
      }, _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 41
        }
      }, 'Create a Ad'), _react2.default.createElement(_semanticUiReact.Form, { onSubmit: this.onSubmit, error: !!this.state.errorMessage, __source: {
          fileName: _jsxFileName,
          lineNumber: 43
        }
      }, _react2.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 44
        }
      }, _react2.default.createElement('label', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 45
        }
      }, 'Minimum Contribution'), _react2.default.createElement(_semanticUiReact.Input, {
        label: 'wei',
        labelPosition: 'right',
        value: this.state.minimumContribution,
        onChange: function onChange(event) {
          return _this3.setState({ minimumContribution: event.target.value });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 46
        }
      }), _react2.default.createElement('label', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 53
        }
      }, 'Total money'), _react2.default.createElement(_semanticUiReact.Input, {
        label: 'wei',
        labelPosition: 'right',
        value: this.state.totalMoney,
        onChange: function onChange(event) {
          return _this3.setState({ totalMoney: event.target.value });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 54
        }
      }), _react2.default.createElement('label', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 61
        }
      }, 'What would investor get ?'), _react2.default.createElement(_semanticUiReact.Input, {
        label: 'wei',
        labelPosition: 'right',
        value: this.state.investor_return,
        onChange: function onChange(event) {
          return _this3.setState({ investor_return: event.target.value });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 62
        }
      })), _react2.default.createElement(_semanticUiReact.Message, { error: true, header: 'Oops!', content: this.state.errorMessage, __source: {
          fileName: _jsxFileName,
          lineNumber: 71
        }
      }), _react2.default.createElement(_semanticUiReact.Button, { loading: this.state.loading, primary: true, __source: {
          fileName: _jsxFileName,
          lineNumber: 72
        }
      }, 'Create!')));
    }
  }]);

  return adNew;
}(_react.Component);

exports.default = adNew;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiYWROZXciLCJfQ29tcG9uZW50IiwiX3JlZiIsIl90aGlzMiIsIl90ZW1wIiwiX3RoaXMiLCJfcmV0IiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJfX3Byb3RvX18iLCJjYWxsIiwiYXBwbHkiLCJjb25jYXQiLCJzdGF0ZSIsInRvdGFsTW9uZXkiLCJtaW5pbXVtQ29udHJpYnV0aW9uIiwiaW52ZXN0b3JfcmV0dXJuIiwiZXJyb3JNZXNzYWdlIiwibG9hZGluZyIsIm9uU3VibWl0IiwiX3JlZjIiLCJtYXJrIiwiX2NhbGxlZSIsImV2ZW50IiwiYWNjb3VudHMiLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwicHJldmVudERlZmF1bHQiLCJzZXRTdGF0ZSIsImV0aCIsImdldEFjY291bnRzIiwic2VudCIsIm1ldGhvZHMiLCJnZW5fYWQiLCJzZW5kIiwiZnJvbSIsInB1c2hSb3V0ZSIsInQwIiwibWVzc2FnZSIsInN0b3AiLCJfeCIsImtleSIsInZhbHVlIiwicmVuZGVyIiwiX3RoaXMzIiwiY3JlYXRlRWxlbWVudCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiZXJyb3IiLCJGaWVsZCIsImxhYmVsIiwibGFiZWxQb3NpdGlvbiIsIm9uQ2hhbmdlIiwidGFyZ2V0IiwiaGVhZGVyIiwiY29udGVudCIsInByaW1hcnkiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQU5BLElBQUlBLGVBQWUsdURBQW5COzs7QUFRQSxJQUFJQyxRQUFRLFVBQVVDLFVBQVYsRUFBc0I7QUFDaEMsMEJBQVVELEtBQVYsRUFBaUJDLFVBQWpCOztB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